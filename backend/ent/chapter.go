// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/WiInfFelix/notr/ent/chapter"
)

// Chapter is the model entity for the Chapter schema.
type Chapter struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChapterQuery when eager-loading is set.
	Edges        ChapterEdges `json:"edges"`
	page_chapter *int
	todo_chapter *int
	selectValues sql.SelectValues
}

// ChapterEdges holds the relations/edges for other nodes in the graph.
type ChapterEdges struct {
	// Book holds the value of the book edge.
	Book []*Book `json:"book,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BookOrErr returns the Book value or an error if the edge
// was not loaded in eager-loading.
func (e ChapterEdges) BookOrErr() ([]*Book, error) {
	if e.loadedTypes[0] {
		return e.Book, nil
	}
	return nil, &NotLoadedError{edge: "book"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Chapter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chapter.FieldID:
			values[i] = new(sql.NullInt64)
		case chapter.FieldTitle, chapter.FieldDescription:
			values[i] = new(sql.NullString)
		case chapter.ForeignKeys[0]: // page_chapter
			values[i] = new(sql.NullInt64)
		case chapter.ForeignKeys[1]: // todo_chapter
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Chapter fields.
func (c *Chapter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chapter.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case chapter.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				c.Title = value.String
			}
		case chapter.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case chapter.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field page_chapter", value)
			} else if value.Valid {
				c.page_chapter = new(int)
				*c.page_chapter = int(value.Int64)
			}
		case chapter.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field todo_chapter", value)
			} else if value.Valid {
				c.todo_chapter = new(int)
				*c.todo_chapter = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Chapter.
// This includes values selected through modifiers, order, etc.
func (c *Chapter) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryBook queries the "book" edge of the Chapter entity.
func (c *Chapter) QueryBook() *BookQuery {
	return NewChapterClient(c.config).QueryBook(c)
}

// Update returns a builder for updating this Chapter.
// Note that you need to call Chapter.Unwrap() before calling this method if this Chapter
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Chapter) Update() *ChapterUpdateOne {
	return NewChapterClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Chapter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Chapter) Unwrap() *Chapter {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Chapter is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Chapter) String() string {
	var builder strings.Builder
	builder.WriteString("Chapter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("title=")
	builder.WriteString(c.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Chapters is a parsable slice of Chapter.
type Chapters []*Chapter
