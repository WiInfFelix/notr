// Code generated by ent, DO NOT EDIT.

package page

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the page type in the database.
	Label = "page"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// EdgeChapter holds the string denoting the chapter edge name in mutations.
	EdgeChapter = "chapter"
	// Table holds the table name of the page in the database.
	Table = "pages"
	// ChapterTable is the table that holds the chapter relation/edge.
	ChapterTable = "chapters"
	// ChapterInverseTable is the table name for the Chapter entity.
	// It exists in this package in order to avoid circular dependency with the "chapter" package.
	ChapterInverseTable = "chapters"
	// ChapterColumn is the table column denoting the chapter relation/edge.
	ChapterColumn = "page_chapter"
)

// Columns holds all SQL columns for page fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldContent,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "pages"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"todo_page",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// ContentValidator is a validator for the "content" field. It is called by the builders before save.
	ContentValidator func(string) error
)

// OrderOption defines the ordering options for the Page queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByChapterCount orders the results by chapter count.
func ByChapterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChapterStep(), opts...)
	}
}

// ByChapter orders the results by chapter terms.
func ByChapter(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChapterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newChapterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChapterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChapterTable, ChapterColumn),
	)
}
