// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/WiInfFelix/notr/ent/book"
	"github.com/WiInfFelix/notr/ent/chapter"
	"github.com/WiInfFelix/notr/ent/page"
	"github.com/WiInfFelix/notr/ent/schema"
	"github.com/WiInfFelix/notr/ent/todo"
	"github.com/WiInfFelix/notr/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	bookFields := schema.Book{}.Fields()
	_ = bookFields
	// bookDescTitle is the schema descriptor for title field.
	bookDescTitle := bookFields[0].Descriptor()
	// book.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	book.TitleValidator = bookDescTitle.Validators[0].(func(string) error)
	// bookDescDescription is the schema descriptor for description field.
	bookDescDescription := bookFields[1].Descriptor()
	// book.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	book.DescriptionValidator = bookDescDescription.Validators[0].(func(string) error)
	chapterFields := schema.Chapter{}.Fields()
	_ = chapterFields
	// chapterDescTitle is the schema descriptor for title field.
	chapterDescTitle := chapterFields[0].Descriptor()
	// chapter.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	chapter.TitleValidator = chapterDescTitle.Validators[0].(func(string) error)
	// chapterDescDescription is the schema descriptor for description field.
	chapterDescDescription := chapterFields[1].Descriptor()
	// chapter.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	chapter.DescriptionValidator = chapterDescDescription.Validators[0].(func(string) error)
	pageFields := schema.Page{}.Fields()
	_ = pageFields
	// pageDescTitle is the schema descriptor for title field.
	pageDescTitle := pageFields[0].Descriptor()
	// page.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	page.TitleValidator = pageDescTitle.Validators[0].(func(string) error)
	// pageDescContent is the schema descriptor for content field.
	pageDescContent := pageFields[1].Descriptor()
	// page.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	page.ContentValidator = pageDescContent.Validators[0].(func(string) error)
	todoFields := schema.Todo{}.Fields()
	_ = todoFields
	// todoDescTitle is the schema descriptor for title field.
	todoDescTitle := todoFields[0].Descriptor()
	// todo.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	todo.TitleValidator = todoDescTitle.Validators[0].(func(string) error)
	// todoDescDescription is the schema descriptor for description field.
	todoDescDescription := todoFields[1].Descriptor()
	// todo.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	todo.DescriptionValidator = todoDescDescription.Validators[0].(func(string) error)
	// todoDescStatus is the schema descriptor for status field.
	todoDescStatus := todoFields[2].Descriptor()
	// todo.DefaultStatus holds the default value on creation for the status field.
	todo.DefaultStatus = todoDescStatus.Default.(bool)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[0].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[1].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
}
